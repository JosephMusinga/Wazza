/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type BusinessStatus = "active" | "banned" | "pending" | "rejected" | "suspended";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type NotificationType = "business_approved" | "business_rejected" | "new_order" | "order_cancelled" | "order_completed" | "order_status_change" | "system_announcement";

export type Numeric = ColumnType<string, number | string, number | string>;

export type OrderStatus = "cancelled" | "collected" | "pending";

export type RecipientType = "business" | "user";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "business" | "user";

export type UserStatus = "active" | "banned" | "suspended" | "pending";

export interface Businesses {
  address: string | null;
  approvedAt: Timestamp | null;
  approvedBy: number | null;
  businessName: string;
  businessType: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  latitude: Numeric | null;
  longitude: Numeric | null;
  ownerId: number;
  phone: string | null;
  status: Generated<BusinessStatus>;
  updatedAt: Generated<Timestamp | null>;
  website: string | null;
}

export interface GiftOrderMetadata {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  isRedeemed: Generated<boolean | null>;
  orderId: number;
  recipientName: string;
  recipientNationalId: string;
  recipientPhone: string | null;
  regularPersonName: string;
  regularPersonPhone: string;
  redeemedAt: Timestamp | null;
  redemptionCode: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface Notifications {
  createdAt: Generated<Timestamp | null>;
  data: Generated<Json | null>;
  id: Generated<number>;
  message: string;
  readAt: Timestamp | null;
  recipientId: number;
  recipientType: Generated<RecipientType>;
  sentAt: Timestamp | null;
  title: string;
  type: NotificationType;
  updatedAt: Generated<Timestamp | null>;
}

export interface OrderItems {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  orderId: number;
  productId: number;
  quantity: number;
  totalPrice: Numeric;
  unitPrice: Numeric;
}

export interface Orders {
  billingAddress: string | null;
  businessId: number;
  buyerId: number;
  completedAt: Timestamp | null;
  createdAt: Generated<Timestamp | null>;
  currency: Generated<string>;
  id: Generated<number>;
  notes: string | null;
  paymentMethod: string | null;
  paymentStatus: Generated<string | null>;
  redemptionCode: string | null;
  shippingAddress: string | null;
  status: Generated<OrderStatus>;
  totalAmount: Numeric;
  updatedAt: Generated<Timestamp | null>;
}

export interface Products {
  businessId: number;
  category: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  price: Numeric;
  updatedAt: Generated<Timestamp | null>;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  address: string | null;
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  latitude: Numeric | null;
  longitude: Numeric | null;
  nationalId: string | null;
  phone: string | null;
  role: Generated<UserRole>;
  status: Generated<UserStatus>;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  businesses: Businesses;
  giftOrderMetadata: GiftOrderMetadata;
  loginAttempts: LoginAttempts;
  notifications: Notifications;
  orderItems: OrderItems;
  orders: Orders;
  products: Products;
  sessions: Sessions;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","business","user"];
export const UserStatusArrayValues: [UserStatus, ...UserStatus[]] = ["active","banned","suspended"];
export const BusinessStatusArrayValues: [BusinessStatus, ...BusinessStatus[]] = ["active","banned","pending","rejected","suspended"];
export const NotificationTypeArrayValues: [NotificationType, ...NotificationType[]] = ["business_approved","business_rejected","new_order","order_cancelled","order_completed","order_status_change","system_announcement"];
export const RecipientTypeArrayValues: [RecipientType, ...RecipientType[]] = ["business","user"];
export const OrderStatusArrayValues: [OrderStatus, ...OrderStatus[]] = ["cancelled","collected","pending"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.